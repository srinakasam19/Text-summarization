Text Summarization Techniques Explained

This project demonstrates three key LLM-based summarization techniques, showing how different approaches are suited to different types of content:

1️⃣ Map-Reduce Summarization

How it works:

Map step: Split long text into smaller chunks. Each chunk is summarized individually.

Reduce step: Combine all chunk summaries into a final, coherent summary.

Advantages:

Ideal for very long text (like YouTube transcripts or long reports).

Avoids exceeding LLM token limits.

Ensures each part of the text is represented in the final summary.

Use in this app: YouTube video transcripts.

2️⃣ Refine Summarization

How it works:

Start with an initial summary of a chunk of text.

Iteratively refine the summary by feeding additional chunks.

LLM updates the summary gradually, improving coherence and completeness.

Advantages:

Maintains context across multiple chunks.

Useful for multi-page articles, research papers, or books.

Produces more accurate and detailed summaries than single-step summarization.

Optional in this app: Can be applied for very long website articles or reports.

3️⃣ Stuff Summarization (Single-Step)

How it works:

Put the entire text into the LLM prompt and generate a summary in one step.

Advantages:

Simple and easy to implement.

Works well for short to medium-length content.

Fast because it requires only one LLM call.

Use in this app: Website summarization (short articles or web pages).





1)FLOW OF THE CODE :(USING  MAP REDUCE TEXT SUMMARIZATION TECHNIQUE)

Flow of the YouTube & Website Summarizer App
1️⃣ Initialization

The app first loads all necessary libraries for web scraping, handling YouTube transcripts, and using the Groq LLM via LangChain.

It reads the GROQ API key from a .env file to securely connect to the LLM.

If the API key is missing, the app stops and shows an error.

2️⃣ User Interface

The app displays a title and description to inform users that it can summarize YouTube videos and websites.

Users can input a URL, which can be either a YouTube video link or a website link.

3️⃣ URL Processing

The app checks if the input URL is a YouTube video by trying to extract the video ID.

If a YouTube ID is found, it treats the input as a YouTube video; otherwise, it treats it as a website URL.

4️⃣ YouTube Video Summarization

The app fetches the video transcript using a YouTube transcript API.

The transcript is then converted into a document format suitable for processing by the LLM.

The app uses Map-Reduce summarization:

Map Step: The transcript is split into smaller chunks, and each chunk is summarized individually.

Reduce Step: All chunk summaries are combined to produce a final concise summary.

This approach allows handling long transcripts without exceeding the model's token limit.

The final summary is displayed to the user in a readable format.

5️⃣ Website Summarization

The app fetches the website content and attempts to extract the main textual content.

If no main content is found, it extracts all visible text on the page.

The extracted text is summarized using single-step (Stuff) summarization, where the LLM generates a concise summary in one step.

The summary is displayed to the user.

6️⃣ Error Handling

Any errors that occur during transcript fetching, website scraping, or summarization are caught and displayed to the user.

This ensures that the app does not crash and provides feedback when a URL cannot be summarized.

7️⃣ Text Summarization Techniques

Map-Reduce (YouTube transcripts): Chunk-wise summarization followed by combination; ideal for long text.

Single-step / Stuff (Websites): Summarizes the full text in one step; suitable for short or medium-length text.

Optional technique for future use: Refine Summarization, which iteratively improves a summary across multiple chunks.




2)FLOW OF THE CODE : (STUFF TEXT SUMMARIZATION) 

Flow of the YouTube & Website Summarizer App (Single-Step Summarization)
1️⃣ Initialization

The app imports necessary libraries for:

Streamlit → building the web UI.

Requests & BeautifulSoup → fetching and parsing website content.

YouTubeTranscriptApi → retrieving video transcripts.

LangChain & ChatGroq → connecting to the Groq LLM for summarization.

No API key is required in this version (or it’s assumed it’s managed inside ChatGroq).

2️⃣ User Interface

Displays a title and caption to indicate the purpose of the app.

Provides a text input for the user to enter either a YouTube video URL or a website URL.

3️⃣ URL Identification

The app checks whether the input is a YouTube URL by attempting to extract the 11-character video ID.

If a valid YouTube ID is found, it treats the input as a YouTube video.

Otherwise, it treats the input as a regular website.

4️⃣ YouTube Video Processing

Fetches the video transcript using YouTubeTranscriptApi.

Combines all transcript snippets into a single string to form the full text of the video.

This text is then sent directly to the LLM for summarization using a single-step prompt.

5️⃣ Website Processing

Sends a GET request to fetch the website HTML content.

Attempts to extract the main textual content using the <main> tag.

If <main> is not available, it falls back to all visible text on the page.

This extracted text is then summarized using the LLM.

6️⃣ LLM Summarization

Initializes the Groq LLM with the chosen model.

Creates a summarization prompt asking the LLM to summarize the text in simple terms.

Sends the text to the LLMChain for processing.

Displays a spinner while the LLM generates the summary.

7️⃣ Display Summary

The final concise summary is displayed under a subheader in the Streamlit app.

8️⃣ Error Handling

Any errors during URL processing, transcript fetching, website scraping, or summarization are caught.

Displays the error message to the user instead of crashing the app.

9️⃣ Text Summarization Technique

This version of the app uses Single-Step Abstractive Summarization (also called the “Stuff” method in LangChain):

The entire text is sent to the LLM in one step.

The LLM generates a natural language summary, rather than copying sentences verbatim (extractive).

Works best for short to medium-length text, like web pages or short transcripts.

10️⃣ Summary of Flow

User enters a URL.

App determines whether it’s a YouTube video or website.

Fetches transcript (YouTube) or text content (Website).

Sends the text to the LLM for single-step summarization.

Displays the final concise summary in Streamlit.

Handles any errors gracefully.


